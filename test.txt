講義ノート：GitとGitHubの総復習 & 便利機能の活用

講義概要

講師: 湊川愛 先生（フリーランスWebデザイナー・漫画家・イラストレーター）
目的: GitとGitHubの基本操作を総復習し、プルリクエストができることを目標とする。加えて、実務で役立つ便利な機能を学ぶ。
参考書籍: 『わかばちゃんと学ぶ Git 使い方入門』

授業の流れ
	1.	GitとGitHubの総復習
	2.	便利な機能の紹介
	•	直前のコミットメッセージ修正 (amend)
	•	作業を一時退避する (stash)

1. GitとGitHubの総復習

Gitとは？
	•	ファイルのバージョン管理を行うシステム
	•	メリット
	•	タイムマシーンのように過去の状態に戻れる
	•	変更履歴を管理し、チーム作業のミスを防げる
	•	共同作業の際、変更を統合しやすい

GitHubとは？
	•	Gitのリモートリポジトリを提供するクラウドサービス
	•	Gitとの違い
	•	Gitはローカルで管理、GitHubはクラウド上で管理
	•	チーム作業や公開リポジトリを活用するのに便利

リポジトリ（Repository）とは？
	•	ファイルの変更履歴を記録する貯蔵庫
	•	Gitの基本概念
	•	ワーキングディレクトリ: 実際に編集する作業エリア
	•	ステージングエリア: コミット前の変更を一時保存するエリア
	•	リポジトリ: 変更履歴が記録される貯蔵庫

Gitの基本操作
	1.	変更の記録
	•	ステージング（add） → ファイルの変更をステージングエリアに追加
	•	コミット（commit） → 変更をリポジトリに保存
	•	プッシュ（push） → リモートリポジトリに変更をアップロード
	2.	変更の取得
	•	プル（pull） → リモートの最新状態をローカルに反映
	•	フェッチ（fetch） → リモートの変更を取得（マージせずに確認可能）

ブランチとマージ
	•	ブランチ（Branch）とは？
	•	開発の並行作業を可能にする機能
	•	例: お寿司の例
	•	1人が酢飯を準備
	•	もう1人がマグロを切る
	•	最後に合体（マージ）して完成
	•	マージ（Merge）
	•	ブランチの変更を統合
	•	コンフリクト（競合） → 異なる変更が同じ箇所にあると発生

フォークとクローン
	•	フォーク（Fork）
	•	他のリポジトリを自分のリモートリポジトリにコピーする
	•	クローン（Clone）
	•	リモートリポジトリをローカルにコピーする

プルリクエスト（Pull Request, PR）
	•	他の人のリポジトリに対し、変更を提案する機能
	•	手順
	1.	フォークしたリポジトリをクローン
	2.	変更を加えてコミット
	3.	自分のリモートリポジトリへプッシュ
	4.	親リポジトリにプルリクエストを送信

2. 便利なGitの機能

1. 直前のコミットメッセージを修正 (amend)

概要:
	•	コミット後にメッセージの誤字脱字を修正できる
	•	git commit --amend を使用

注意点:
	•	既にプッシュしたコミットは修正すると衝突が発生するため注意

2. 割り込み作業に便利な stash

概要:
	•	作業中の変更を一時的に退避し、別の作業に切り替えられる
	•	git stash を使うと、作業内容を保存して他のブランチに移動可能

手順:
	1.	git stash で変更を退避
	2.	git checkout master で他のブランチに移動
	3.	必要な作業を完了後、元のブランチに戻る
	4.	git stash pop で退避した変更を復元

質疑応答

Q1. マージせずにリモートの変更を取得する方法は？

A: git fetch を使う
	•	フェッチ (fetch) → 変更を取得するが、ローカルの状態には影響なし
	•	プル (pull) → 変更を取得し、ローカルブランチに統合

Q2. オフライン環境でGitを使える？

A: はい、可能
	•	ローカルでのコミットはインターネット不要
	•	オンライン環境に戻った際に push すれば同期可能

まとめ

GitとGitHubの総復習
	•	Gitは ファイルの変更履歴を管理するツール
	•	GitHubは リモートリポジトリを提供するクラウドサービス
	•	基本操作: add → commit → push
	•	共同開発: branch で作業を分け、merge で統合
	•	リモート作業: fetch と pull の違いを理解

便利機能
	1.	直前のコミットメッセージ修正 (amend)
	2.	作業を一時退避する (stash)

実務でも使えるスキルを身につけ、より効率的にGitを活用しよう！
